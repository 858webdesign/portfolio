'use client';

import { useEffect, useRef, useState } from 'react';

const commonWordPool = [
  'APPLE', 'BANANA', 'ORANGE', 'CHAIR', 'TABLE', 'WINDOW', 'MOUNTAIN', 'RIVER',
  'OCEAN', 'TREE', 'HOUSE', 'CANDLE', 'PENCIL', 'PAPER', 'LADDER', 'BUTTON',
  'CLOCK', 'MIRROR', 'WATER', 'SNOW', 'RAIN', 'STORM', 'CLOUD', 'BRIDGE', 'CARPET'
];

const directions = [
  [0, 1], [1, 0], [1, 1], [0, -1], [-1, 0], [-1, -1], [1, -1], [-1, 1]
];

const getRandomWords = (pool, count) =>
  [...pool].sort(() => 0.5 - Math.random()).slice(0, count);

function generateGridWithWords(words, size = 10) {
  const grid = Array.from({ length: size }, () => Array(size).fill(null));

  const placeWord = (word) => {
    for (let attempt = 0; attempt < 100; attempt++) {
      const dir = directions[Math.floor(Math.random() * directions.length)];
      const row = Math.floor(Math.random() * size);
      const col = Math.floor(Math.random() * size);

      let fits = true;
      for (let i = 0; i < word.length; i++) {
        const r = row + dir[0] * i;
        const c = col + dir[1] * i;
        if (
          r < 0 || r >= size ||
          c < 0 || c >= size ||
          (grid[r][c] !== null && grid[r][c] !== word[i])
        ) {
          fits = false;
          break;
        }
      }
      if (!fits) continue;

      for (let i = 0; i < word.length; i++) {
        const r = row + dir[0] * i;
        const c = col + dir[1] * i;
        grid[r][c] = word[i];
      }
      return true;
    }
    return false;
  };

  words.forEach(placeWord);

  for (let r = 0; r < size; r++) {
    for (let c = 0; c < size; c++) {
      if (!grid[r][c]) {
        grid[r][c] = String.fromCharCode(65 + Math.floor(Math.random() * 26));
      }
    }
  }

  return grid;
}

export default function WordSearchCanvas() {
  const canvasRef = useRef(null);
  const [words, setWords] = useState([]);
  const [grid, setGrid] = useState([]);
  const [selectedPath, setSelectedPath] = useState([]);
  const [foundWords, setFoundWords] = useState([]);
  const cellSize = 32;

  const draggingRef = useRef(false);
  const lockedDirRef = useRef(null);

  useEffect(() => {
    const newWords = getRandomWords(commonWordPool, 5);
    const newGrid = generateGridWithWords(newWords);
    setWords(newWords);
    setGrid(newGrid);
    setFoundWords([]);
    drawGrid(newGrid, [], []);
  }, []);

  useEffect(() => {
    drawGrid(grid, selectedPath, foundWords.flatMap(w => w.path));
  }, [grid, selectedPath, foundWords]);

  const drawGrid = (grid, selection = [], found = []) => {
    const canvas = canvasRef.current;
    if (!canvas || grid.length === 0) return;
    const ctx = canvas.getContext('2d');

    const theme = getComputedStyle(document.documentElement);
    const textColor = theme.getPropertyValue('--color-text').trim() || '#000';
    const accentColor = theme.getPropertyValue('--color-accent').trim() || '#e35205';
    const foundColor = '#90ee90';
    const bgColor = '#fff';

    const size = grid.length;
    const canvasSize = size * cellSize;
    canvas.width = canvasSize;
    canvas.height = canvasSize;
    ctx.clearRect(0, 0, canvasSize, canvasSize);

    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.font = `${cellSize * 0.6}px sans-serif`;

    for (let r = 0; r < size; r++) {
      for (let c = 0; c < size; c++) {
        const x = c * cellSize;
        const y = r * cellSize;

        const isFound = found.some(p => p.row === r && p.col === c);
        const isSelected = selection.some(p => p.row === r && p.col === c);

        ctx.fillStyle = isFound ? foundColor : isSelected ? accentColor : bgColor;
        ctx.fillRect(x, y, cellSize, cellSize);
        ctx.strokeStyle = '#ccc';
        ctx.strokeRect(x, y, cellSize, cellSize);

        ctx.fillStyle = textColor;
        ctx.fillText(grid[r][c], x + cellSize / 2, y + cellSize / 2);
      }
    }
  };

  const getCellFromEvent = (e) => {
    const rect = canvasRef.current.getBoundingClientRect();
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;
    const x = clientX - rect.left;
    const y = clientY - rect.top;
    const row = Math.floor(y / cellSize);
    const col = Math.floor(x / cellSize);
    return { row, col };
  };

  const handleDragStart = (e) => {
    e.preventDefault();
    const start = getCellFromEvent(e);
    draggingRef.current = true;
    lockedDirRef.current = null;
    setSelectedPath([start]);
  };

  const handleDragMove = (e) => {
    if (!draggingRef.current) return;
    e.preventDefault();

    const current = getCellFromEvent(e);
    const path = selectedPath;
    if (!path.length) return;

    const first = path[0];
    const len = path.length;

    // Determine intended direction from the very first cell
    if (len === 1) {
      const dr = current.row - first.row;
      const dc = current.col - first.col;
      if (Math.abs(dr) > 1 || Math.abs(dc) > 1) return;
      if (dr === 0 && dc === 0) return;
      lockedDirRef.current = [dr, dc];
    }

    const [dr, dc] = lockedDirRef.current || [];
    const expectedRow = first.row + dr * len;
    const expectedCol = first.col + dc * len;

    if (current.row !== expectedRow || current.col !== expectedCol) return;
    if (path.some(p => p.row === current.row && p.col === current.col)) return;

    setSelectedPath([...path, current]);
  };

  const handleDragEnd = () => {
    draggingRef.current = false;
    lockedDirRef.current = null;
    const path = selectedPath;
    if (!path.length) return;

    const letters = path.map(({ row, col }) => grid[row][col]).join('');
    const reversed = letters.split('').reverse().join('');
    const match = words.find(w => w === letters || w === reversed);

    if (match && !foundWords.find(f => f.word === match)) {
      setFoundWords(prev => [...prev, { word: match, path }]);
    }

    setSelectedPath([]);
  };

  const highlightWord = (word) => {
    for (let row = 0; row < grid.length; row++) {
      for (let col = 0; col < grid[row].length; col++) {
        for (let [dr, dc] of directions) {
          const path = [];
          for (let i = 0; i < word.length; i++) {
            const r = row + dr * i;
            const c = col + dc * i;
            if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length) break;
            if (grid[r][c] !== word[i]) break;
            path.push({ row: r, col: c });
          }

          if (path.length === word.length) {
            setSelectedPath(path);
            setTimeout(() => setSelectedPath([]), 1000);
            return;
          }
        }
      }
    }
  };

  return (
    <div className="flex flex-col items-center justify-center p-4">
      <canvas
        ref={canvasRef}
        className="touch-none border border-gray-300"
        onMouseDown={handleDragStart}
        onMouseMove={(e) => e.buttons === 1 && handleDragMove(e)}
        onMouseUp={handleDragEnd}
        onMouseLeave={(e) => e.buttons === 1 && handleDragEnd(e)}
        onTouchStart={handleDragStart}
        onTouchMove={handleDragMove}
        onTouchEnd={handleDragEnd}
      />

      <div className="flex flex-wrap justify-center gap-2 mt-4">
        {words.map((word) => {
          const isFound = foundWords.some(w => w.word === word);
          return (
            <button
              key={word}
              onClick={() => highlightWord(word)}
              className={`px-2 py-1 rounded text-sm border transition-colors
                ${isFound ? 'bg-green-500 text-white' : 'bg-gray-200 text-black hover:bg-gray-300'}
              `}
            >
              {word}
            </button>
          );
        })}
      </div>
    </div>
  );
}